"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const util_1 = require("./util");
class Scpper {
    constructor(options = {}) {
        this._site = null;
        this._limit = 10;
        util_1.assert(typeof options === 'object', 'options should be an object');
        const api = util_1.createApi(options);
        util_1.fillRequest(this, api);
        this._api = api;
        if (options.limit)
            this.limit = options.limit;
        if (options.site)
            this.site = options.site;
    }
    /**
     * Retrieve a page by id
     * @param id page id
     */
    getPage(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.get('page', Object.assign({ id }, options));
            if (!response.ok)
                throw new Error(response.problem);
            return response;
        });
    }
    /**
     * Retrieve a user by id
     * @param id user id
     */
    getUser(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.get('user', Object.assign({ id }, options));
            if (!response.ok)
                throw new Error(response.problem);
            return response;
        });
    }
    /**
     * Retrieve up to limit pages from the specified
     * wiki with the name matching title
     * @param search search
     * @param options page search options
     */
    findPages(search, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.get('find-pages', Object.assign({ title: search }, options));
            if (!response.ok)
                throw new Error(response.problem);
            return response;
        });
    }
    /**
     * Retrieves up to limit users from the with part of
     * the name matching name
     * @param search search
     * @param options user search options
     */
    findUsers(search, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.get('find-users', Object.assign({ name: search }, options));
            if (!response.ok)
                throw new Error(response.problem);
            return response;
        });
    }
    /**
     * Retrieve up to limit pages, selected using provided tags
     * @param tag list of tags, each prefixed with "+" or "-", separated by commas
     * @param options tag search options
     */
    findTag(tag, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const search = Array.isArray(tag) ? tag.join(',') : tag;
            const response = yield this.api.get('tags', Object.assign({ tags: search }, options));
            if (!response.ok)
                throw new Error(response.problem);
            return response;
        });
    }
    /**
     * Internal API object
     */
    get api() {
        return this._api;
    }
    /**
     * Scppper item limit
     */
    get limit() {
        return this._limit;
    }
    /**
     * Set Scpper item limit
     */
    set limit(limit) {
        util_1.assert(typeof limit === 'number', 'limit must be a number');
        this._limit = limit;
    }
    /**
     * Scpper's search default site
     */
    get site() {
        return this._site;
    }
    /**
     * Set default site for Scpper's search
     */
    set site(site) {
        // @ts-ignore
        site = site.toLowerCase();
        util_1.assert(site in types_1.Api.SiteInitial, `${site} is not a valid wiki site`);
        this._site = site;
    }
    /**
     * Get API URL
     */
    get url() {
        return this.api.getBaseURL();
    }
}
exports.Scpper = Scpper;
