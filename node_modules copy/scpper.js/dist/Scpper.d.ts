import * as apisauce from 'apisauce';
import { Api, Options } from './types';
export declare class Scpper {
    private _api;
    private _site;
    private _limit;
    constructor(options?: Api.Options);
    /**
     * Retrieve a page by id
     * @param id page id
     */
    getPage(id: string, options?: Options.getPage): Promise<apisauce.ApiOkResponse<Api.PageItem>>;
    /**
     * Retrieve a user by id
     * @param id user id
     */
    getUser(id: string, options?: Options.getUser): Promise<apisauce.ApiOkResponse<Api.UserItem>>;
    /**
     * Retrieve up to limit pages from the specified
     * wiki with the name matching title
     * @param search search
     * @param options page search options
     */
    findPages(search: string, options?: Options.findPage): Promise<apisauce.ApiOkResponse<Api.searchPage>>;
    /**
     * Retrieves up to limit users from the with part of
     * the name matching name
     * @param search search
     * @param options user search options
     */
    findUsers(search: string, options?: Options.findUser): Promise<apisauce.ApiOkResponse<Api.searchUser>>;
    /**
     * Retrieve up to limit pages, selected using provided tags
     * @param tag list of tags, each prefixed with "+" or "-", separated by commas
     * @param options tag search options
     */
    findTag(tag: string | string[], options?: Options.findTag): Promise<apisauce.ApiOkResponse<Api.searchPage>>;
    /**
     * Internal API object
     */
    readonly api: apisauce.ApisauceInstance;
    /**
     * Scppper item limit
     */
    /**
    * Set Scpper item limit
    */
    limit: number;
    /**
     * Scpper's search default site
     */
    /**
    * Set default site for Scpper's search
    */
    site: Api.site;
    /**
     * Get API URL
     */
    readonly url: string;
}
